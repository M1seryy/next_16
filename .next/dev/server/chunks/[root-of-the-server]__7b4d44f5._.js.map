{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/config/env/env.client.ts"],"sourcesContent":["import { z } from 'zod'\nimport { createEnv } from '@t3-oss/env-nextjs'\n\n// env client\nexport const envClient = createEnv({\n    client: {\n        NEXT_PUBLIC_APP_URL: z.string().optional(),\n    },\n    emptyStringAsUndefined: true,\n    runtimeEnv: {\n        NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n    },\n})\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,MAAM,YAAY,IAAA,4KAAS,EAAC;IAC/B,QAAQ;QACJ,qBAAqB,oLAAC,CAAC,MAAM,GAAG,QAAQ;IAC5C;IACA,wBAAwB;IACxB,YAAY;QACR,mBAAmB;IACvB;AACJ","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/config/env/env.server.ts"],"sourcesContent":["import { z } from 'zod'\nimport { createEnv } from '@t3-oss/env-nextjs'\n\n// env server (server-only secrets)\nexport const envServer = createEnv({\n    server: {\n        DATABASE_URL: z.string().min(1, 'DATABASE_URL is required'),\n        GOOGLE_CLIENT_ID: z.string().optional(),\n        GOOGLE_CLIENT_SECRET: z.string().optional(),\n    },\n    runtimeEnv: {\n        DATABASE_URL: process.env.DATABASE_URL,\n        GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,\n        GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET,\n    },\n})\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,MAAM,YAAY,IAAA,4KAAS,EAAC;IAC/B,QAAQ;QACJ,cAAc,oLAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAChC,kBAAkB,oLAAC,CAAC,MAAM,GAAG,QAAQ;QACrC,sBAAsB,oLAAC,CAAC,MAAM,GAAG,QAAQ;IAC7C;IACA,YAAY;QACR,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,kBAAkB,QAAQ,GAAG,CAAC,gBAAgB;QAC9C,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;IAC1D;AACJ","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/config/env/index.ts"],"sourcesContent":["export * from './env.client'\nexport * from './env.server'\n\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/schemas/books.schema.ts"],"sourcesContent":["import { pgTable, serial, text, integer, timestamp } from 'drizzle-orm/pg-core'\n\nexport const books = pgTable('books', {\n    id: serial('id').primaryKey(),\n    title: text('title').notNull(),\n    author: text('author').notNull(),\n    publishedYear: integer('published_year').notNull(),\n    description: text('description'),\n    createdAt: timestamp('created_at').defaultNow().notNull(),\n    updatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEO,MAAM,QAAQ,IAAA,kKAAO,EAAC,SAAS;IAClC,IAAI,IAAA,6KAAM,EAAC,MAAM,UAAU;IAC3B,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO;IAC5B,QAAQ,IAAA,yKAAI,EAAC,UAAU,OAAO;IAC9B,eAAe,IAAA,+KAAO,EAAC,kBAAkB,OAAO;IAChD,aAAa,IAAA,yKAAI,EAAC;IAClB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AAC3D","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/schemas/index.ts"],"sourcesContent":["export * from './books.schema'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/drizzle.server.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/postgres-js'\nimport postgres from 'postgres'\nimport { envServer } from '@/config/env'\nimport * as schema from './schemas'\n\nconst connectionString = envServer.DATABASE_URL!\n\nconst client = postgres(connectionString)\nexport const db = drizzle(client, { schema })\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;AACA;AAAA;;;;;AAEA,MAAM,mBAAmB,oJAAS,CAAC,YAAY;AAE/C,MAAM,SAAS,IAAA,qJAAQ,EAAC;AACjB,MAAM,KAAK,IAAA,uKAAO,EAAC,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/index.ts"],"sourcesContent":["export { db } from './drizzle.server'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/app/api/books/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { db } from '@/pkg/integrations/supabase'\nimport { books } from '@/pkg/integrations/supabase/schemas'\nimport { ilike, or } from 'drizzle-orm'\n\nexport async function GET(request: NextRequest) {\n    try {\n        const { searchParams } = new URL(request.url)\n        const searchQuery = searchParams.get('search')\n\n\n        let booksData\n\n        if (searchQuery) {\n            booksData = await db\n                .select()\n                .from(books)\n                .where(\n                    or(\n                        ilike(books.title, `%${searchQuery}%`),\n                        ilike(books.author, `%${searchQuery}%`)\n                    )\n                )\n        } else {\n            booksData = await db.select().from(books)\n        }\n\n        return NextResponse.json(booksData)\n    } catch (error) {\n        return NextResponse.json({ error: 'Failed to fetch books' }, { status: 500 })\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;AAEO,eAAe,IAAI,OAAoB;IAC1C,IAAI;QACA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,cAAc,aAAa,GAAG,CAAC;QAGrC,IAAI;QAEJ,IAAI,aAAa;YACb,YAAY,MAAM,mKAAE,CACf,MAAM,GACN,IAAI,CAAC,+KAAK,EACV,KAAK,CACF,IAAA,0KAAE,EACE,IAAA,6KAAK,EAAC,+KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,GACrC,IAAA,6KAAK,EAAC,+KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAGtD,OAAO;YACH,YAAY,MAAM,mKAAE,CAAC,MAAM,GAAG,IAAI,CAAC,+KAAK;QAC5C;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACJ","debugId":null}}]
}