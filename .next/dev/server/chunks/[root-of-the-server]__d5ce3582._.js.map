{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/config/env/env.client.ts"],"sourcesContent":["import { z } from 'zod'\nimport { createEnv } from '@t3-oss/env-nextjs'\n\n// env client\nexport const envClient = createEnv({\n    client: {\n        NEXT_PUBLIC_APP_URL: z.string().optional(),\n    },\n    emptyStringAsUndefined: true,\n    runtimeEnv: {\n        NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n    },\n})\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,MAAM,YAAY,IAAA,4KAAS,EAAC;IAC/B,QAAQ;QACJ,qBAAqB,oLAAC,CAAC,MAAM,GAAG,QAAQ;IAC5C;IACA,wBAAwB;IACxB,YAAY;QACR,mBAAmB;IACvB;AACJ","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/config/env/env.server.ts"],"sourcesContent":["import { z } from 'zod'\nimport { createEnv } from '@t3-oss/env-nextjs'\n\n// env server (server-only secrets)\nexport const envServer = createEnv({\n    server: {\n        DATABASE_URL: z.string().min(1, 'DATABASE_URL is required'),\n        GOOGLE_CLIENT_ID: z.string().optional(),\n        GOOGLE_CLIENT_SECRET: z.string().optional(),\n    },\n    runtimeEnv: {\n        DATABASE_URL: process.env.DATABASE_URL,\n        GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,\n        GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET,\n    },\n})\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,MAAM,YAAY,IAAA,4KAAS,EAAC;IAC/B,QAAQ;QACJ,cAAc,oLAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAChC,kBAAkB,oLAAC,CAAC,MAAM,GAAG,QAAQ;QACrC,sBAAsB,oLAAC,CAAC,MAAM,GAAG,QAAQ;IAC7C;IACA,YAAY;QACR,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,kBAAkB,QAAQ,GAAG,CAAC,gBAAgB;QAC9C,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;IAC1D;AACJ","debugId":null}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/config/env/index.ts"],"sourcesContent":["export * from './env.client'\nexport * from './env.server'\n\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/schemas/books.schema.ts"],"sourcesContent":["import { pgTable, serial, text, integer, timestamp } from 'drizzle-orm/pg-core'\n\nexport const books = pgTable('books', {\n    id: serial('id').primaryKey(),\n    title: text('title').notNull(),\n    author: text('author').notNull(),\n    publishedYear: integer('published_year').notNull(),\n    description: text('description'),\n    createdAt: timestamp('created_at').defaultNow().notNull(),\n    updatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEO,MAAM,QAAQ,IAAA,kKAAO,EAAC,SAAS;IAClC,IAAI,IAAA,6KAAM,EAAC,MAAM,UAAU;IAC3B,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO;IAC5B,QAAQ,IAAA,yKAAI,EAAC,UAAU,OAAO;IAC9B,eAAe,IAAA,+KAAO,EAAC,kBAAkB,OAAO;IAChD,aAAa,IAAA,yKAAI,EAAC;IAClB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AAC3D","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/schemas/users.schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, boolean } from 'drizzle-orm/pg-core'\n\nexport const users = pgTable('users', {\n    id: text('id').primaryKey(),\n    email: text('email').notNull().unique(),\n    name: text('name'),\n    emailVerified: boolean('email_verified').default(false).notNull(),\n    image: text('image'),\n    createdAt: timestamp('created_at').defaultNow().notNull(),\n    updatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const sessions = pgTable('sessions', {\n    id: text('id').primaryKey(),\n    userId: text('user_id').notNull().references(() => users.id, { onDelete: 'cascade' }),\n    expiresAt: timestamp('expires_at').notNull(),\n    token: text('token').notNull().unique(),\n    createdAt: timestamp('created_at').defaultNow().notNull(),\n    updatedAt: timestamp('updated_at').defaultNow().notNull(),\n    ipAddress: text('ip_address'),\n    userAgent: text('user_agent'),\n})\n\nexport const accounts = pgTable('accounts', {\n    id: text('id').primaryKey(),\n    userId: text('user_id').notNull().references(() => users.id, { onDelete: 'cascade' }),\n    accountId: text('account_id').notNull(),\n    providerId: text('provider_id').notNull(),\n    accessToken: text('access_token'),\n    refreshToken: text('refresh_token'),\n    idToken: text('id_token'),\n    accessTokenExpiresAt: timestamp('access_token_expires_at'),\n    refreshTokenExpiresAt: timestamp('refresh_token_expires_at'),\n    scope: text('scope'),\n    createdAt: timestamp('created_at').defaultNow().notNull(),\n    updatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const verification = pgTable('verification', {\n    id: text('id').primaryKey(),\n    identifier: text('identifier').notNull(),\n    value: text('value').notNull(),\n    expiresAt: timestamp('expires_at').notNull(),\n    createdAt: timestamp('created_at').defaultNow().notNull(),\n    updatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport type User = typeof users.$inferSelect\nexport type Session = typeof sessions.$inferSelect\nexport type Account = typeof accounts.$inferSelect\nexport type Verification = typeof verification.$inferSelect\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;AAEO,MAAM,QAAQ,IAAA,kKAAO,EAAC,SAAS;IAClC,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU;IACzB,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO,GAAG,MAAM;IACrC,MAAM,IAAA,yKAAI,EAAC;IACX,eAAe,IAAA,+KAAO,EAAC,kBAAkB,OAAO,CAAC,OAAO,OAAO;IAC/D,OAAO,IAAA,yKAAI,EAAC;IACZ,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AAC3D;AAEO,MAAM,WAAW,IAAA,kKAAO,EAAC,YAAY;IACxC,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU;IACzB,QAAQ,IAAA,yKAAI,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACnF,WAAW,IAAA,mLAAS,EAAC,cAAc,OAAO;IAC1C,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO,GAAG,MAAM;IACrC,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,yKAAI,EAAC;IAChB,WAAW,IAAA,yKAAI,EAAC;AACpB;AAEO,MAAM,WAAW,IAAA,kKAAO,EAAC,YAAY;IACxC,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU;IACzB,QAAQ,IAAA,yKAAI,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACnF,WAAW,IAAA,yKAAI,EAAC,cAAc,OAAO;IACrC,YAAY,IAAA,yKAAI,EAAC,eAAe,OAAO;IACvC,aAAa,IAAA,yKAAI,EAAC;IAClB,cAAc,IAAA,yKAAI,EAAC;IACnB,SAAS,IAAA,yKAAI,EAAC;IACd,sBAAsB,IAAA,mLAAS,EAAC;IAChC,uBAAuB,IAAA,mLAAS,EAAC;IACjC,OAAO,IAAA,yKAAI,EAAC;IACZ,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AAC3D;AAEO,MAAM,eAAe,IAAA,kKAAO,EAAC,gBAAgB;IAChD,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU;IACzB,YAAY,IAAA,yKAAI,EAAC,cAAc,OAAO;IACtC,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO;IAC5B,WAAW,IAAA,mLAAS,EAAC,cAAc,OAAO;IAC1C,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AAC3D","debugId":null}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/schemas/index.ts"],"sourcesContent":["export * from './books.schema'\nexport * from './users.schema'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/drizzle.server.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/postgres-js'\nimport postgres from 'postgres'\nimport { envServer } from '@/config/env'\nimport * as schema from './schemas'\n\nconst connectionString = envServer.DATABASE_URL!\n\nconst client = postgres(connectionString)\nexport const db = drizzle(client, { schema })\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;AACA;AAAA;;;;;AAEA,MAAM,mBAAmB,oJAAS,CAAC,YAAY;AAE/C,MAAM,SAAS,IAAA,qJAAQ,EAAC;AACjB,MAAM,KAAK,IAAA,uKAAO,EAAC,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/index.ts"],"sourcesContent":["export { db } from './drizzle.server'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/better-auth/auth.config.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { db } from '@/pkg/integrations/supabase';\nimport { users, sessions, accounts, verification } from '@/pkg/integrations/supabase/schemas';\n\nexport const auth = betterAuth({\n    secrets: [process.env.AUTH_SECRET!],\n    database: drizzleAdapter(db, {\n        provider: \"pg\",\n        schema: {\n            user: users,\n            session: sessions,\n            account: accounts,\n            verification,\n        },\n    }),\n    socialProviders: {\n        google: {\n            clientId: process.env.GOOGLE_CLIENT_ID!,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n        },\n    },\n    session: {\n        expiresIn: 60 * 60 * 24 * 7, // 7 days\n        updateAge: 60 * 60 * 24, // 1 day\n    },\n    trustedOrigins: [\"http://localhost:3000\"],\n});\n\n\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;;;;;AAEO,MAAM,OAAO,IAAA,kOAAU,EAAC;IAC3B,SAAS;QAAC,QAAQ,GAAG,CAAC,WAAW;KAAE;IACnC,UAAU,IAAA,sMAAc,EAAC,mKAAE,EAAE;QACzB,UAAU;QACV,QAAQ;YACJ,MAAM,+KAAK;YACX,SAAS,kLAAQ;YACjB,SAAS,kLAAQ;YACjB,cAAA,sLAAY;QAChB;IACJ;IACA,iBAAiB;QACb,QAAQ;YACJ,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAClD;IACJ;IACA,SAAS;QACL,WAAW,KAAK,KAAK,KAAK;QAC1B,WAAW,KAAK,KAAK;IACzB;IACA,gBAAgB;QAAC;KAAwB;AAC7C","debugId":null}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/app/api/auth/%5B...all%5D/route.ts"],"sourcesContent":["import { auth } from '@/pkg/integrations/better-auth/auth.config'\nimport { NextRequest } from 'next/server'\n\nexport const GET = async (request: NextRequest) => {\n    try {\n        console.log('Auth GET request:', request.url)\n        return await auth.handler(request)\n    } catch (error) {\n        console.error('Auth GET error:', error)\n        return new Response(JSON.stringify({ error: 'Auth GET failed', details: error instanceof Error ? error.message : 'Unknown error' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n        })\n    }\n}\n\nexport const POST = async (request: NextRequest) => {\n    try {\n        console.log('Auth POST request:', request.url)\n        return await auth.handler(request)\n    } catch (error) {\n        console.error('Auth POST error:', error)\n        return new Response(JSON.stringify({ error: 'Auth POST failed', details: error instanceof Error ? error.message : 'Unknown error' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n        })\n    }\n}\n\n\n"],"names":[],"mappings":";;;;;;AAAA;;AAGO,MAAM,MAAM,OAAO;IACtB,IAAI;QACA,QAAQ,GAAG,CAAC,qBAAqB,QAAQ,GAAG;QAC5C,OAAO,MAAM,wKAAI,CAAC,OAAO,CAAC;IAC9B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;YAAmB,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAgB,IAAI;YACjI,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IACJ;AACJ;AAEO,MAAM,OAAO,OAAO;IACvB,IAAI;QACA,QAAQ,GAAG,CAAC,sBAAsB,QAAQ,GAAG;QAC7C,OAAO,MAAM,wKAAI,CAAC,OAAO,CAAC;IAC9B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;YAAoB,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAgB,IAAI;YAClI,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IACJ;AACJ","debugId":null}}]
}