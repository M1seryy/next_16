{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/better-auth/auth.config.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { db } from '@/pkg/integrations/supabase';\nimport { users, sessions, accounts } from '@/pkg/integrations/supabase/schemas';\n\nexport const auth = betterAuth({\n    secrets: [process.env.AUTH_SECRET!],\n    socialProviders: {\n        google: {\n            clientId: process.env.GOOGLE_CLIENT_ID!,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n        },\n    },\n    storage: {\n        sessions: new Map<string, any>(),\n        async getSession(id: string) {\n            return this.sessions.get(id);\n        },\n        async setSession(id: string, session: any) {\n            this.sessions.set(id, session);\n        },\n        async deleteSession(id: string) {\n            this.sessions.delete(id);\n        },\n    },\n});\n\nconsole.log('🔐 Better Auth configured with Map storage');\n\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAKO,MAAM,OAAO,IAAA,kOAAU,EAAC;IAC3B,SAAS;QAAC,QAAQ,GAAG,CAAC,WAAW;KAAE;IACnC,iBAAiB;QACb,QAAQ;YACJ,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAClD;IACJ;IACA,SAAS;QACL,UAAU,IAAI;QACd,MAAM,YAAW,EAAU;YACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC7B;QACA,MAAM,YAAW,EAAU,EAAE,OAAY;YACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI;QAC1B;QACA,MAAM,eAAc,EAAU;YAC1B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QACzB;IACJ;AACJ;AAEA,QAAQ,GAAG,CAAC","debugId":null}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/app/api/auth/%5B...all%5D/route.ts"],"sourcesContent":["import { auth } from '@/pkg/integrations/better-auth/auth.config'\nimport { NextRequest } from 'next/server'\n\nexport const GET = async (request: NextRequest) => {\n    try {\n        return await auth.handler(request)\n    } catch (error) {\n        return new Response(JSON.stringify({ error: 'Auth GET failed' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n        })\n    }\n}\n\nexport const POST = async (request: NextRequest) => {\n    try {\n        return await auth.handler(request)\n    } catch (error) {\n        return new Response(JSON.stringify({ error: 'Auth POST failed' }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n        })\n    }\n}\n\n\n"],"names":[],"mappings":";;;;;;AAAA;;AAGO,MAAM,MAAM,OAAO;IACtB,IAAI;QACA,OAAO,MAAM,wKAAI,CAAC,OAAO,CAAC;IAC9B,EAAE,OAAO,OAAO;QACZ,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAkB,IAAI;YAC9D,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IACJ;AACJ;AAEO,MAAM,OAAO,OAAO;IACvB,IAAI;QACA,OAAO,MAAM,wKAAI,CAAC,OAAO,CAAC;IAC9B,EAAE,OAAO,OAAO;QACZ,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAmB,IAAI;YAC/D,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IACJ;AACJ","debugId":null}}]
}