{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/config/env/env.client.ts"],"sourcesContent":["import { z } from 'zod'\n\nimport { createEnv } from '@t3-oss/env-nextjs'\n\n// env client\nexport const envClient = createEnv({\n  client: {\n    NEXT_PUBLIC_APP_URL: z.string().optional(),\n  },\n  emptyStringAsUndefined: true,\n  runtimeEnv: {\n    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n  },\n})\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAGO,MAAM,YAAY,IAAA,4KAAS,EAAC;IACjC,QAAQ;QACN,qBAAqB,oLAAC,CAAC,MAAM,GAAG,QAAQ;IAC1C;IACA,wBAAwB;IACxB,YAAY;QACV,mBAAmB;IACrB;AACF","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/config/env/env.server.ts"],"sourcesContent":["import { z } from 'zod'\n\nimport { createEnv } from '@t3-oss/env-nextjs'\n\n// env server (server-only secrets)\nexport const envServer = createEnv({\n  server: {\n    DATABASE_URL: z.string().min(1, 'DATABASE_URL is required'),\n    GOOGLE_CLIENT_ID: z.string().optional(),\n    GOOGLE_CLIENT_SECRET: z.string().optional(),\n  },\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,\n    GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET,\n  },\n})\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAGO,MAAM,YAAY,IAAA,4KAAS,EAAC;IACjC,QAAQ;QACN,cAAc,oLAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAChC,kBAAkB,oLAAC,CAAC,MAAM,GAAG,QAAQ;QACrC,sBAAsB,oLAAC,CAAC,MAAM,GAAG,QAAQ;IAC3C;IACA,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,kBAAkB,QAAQ,GAAG,CAAC,gBAAgB;QAC9C,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;IACxD;AACF","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/config/env/index.ts"],"sourcesContent":["export * from './env.client'\nexport * from './env.server'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/schemas/books.schema.ts"],"sourcesContent":["import { integer, pgTable, serial, text, timestamp } from 'drizzle-orm/pg-core'\n\nexport const books = pgTable('books', {\n  id: serial('id').primaryKey(),\n  title: text('title').notNull(),\n  author: text('author').notNull(),\n  publishedYear: integer('published_year').notNull(),\n  description: text('description'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEO,MAAM,QAAQ,IAAA,kKAAO,EAAC,SAAS;IACpC,IAAI,IAAA,6KAAM,EAAC,MAAM,UAAU;IAC3B,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO;IAC5B,QAAQ,IAAA,yKAAI,EAAC,UAAU,OAAO;IAC9B,eAAe,IAAA,+KAAO,EAAC,kBAAkB,OAAO;IAChD,aAAa,IAAA,yKAAI,EAAC;IAClB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/schemas/users.schema.ts"],"sourcesContent":["import { boolean, pgTable, text, timestamp } from 'drizzle-orm/pg-core'\n\nexport const users = pgTable('users', {\n  id: text('id').primaryKey(),\n  email: text('email').notNull().unique(),\n  name: text('name'),\n  emailVerified: boolean('email_verified').default(false).notNull(),\n  image: text('image'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const sessions = pgTable('sessions', {\n  id: text('id').primaryKey(),\n  userId: text('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  expiresAt: timestamp('expires_at').notNull(),\n  token: text('token').notNull().unique(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n  ipAddress: text('ip_address'),\n  userAgent: text('user_agent'),\n})\n\nexport const accounts = pgTable('accounts', {\n  id: text('id').primaryKey(),\n  userId: text('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  accountId: text('account_id').notNull(),\n  providerId: text('provider_id').notNull(),\n  accessToken: text('access_token'),\n  refreshToken: text('refresh_token'),\n  idToken: text('id_token'),\n  accessTokenExpiresAt: timestamp('access_token_expires_at'),\n  refreshTokenExpiresAt: timestamp('refresh_token_expires_at'),\n  scope: text('scope'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport const verification = pgTable('verification', {\n  id: text('id').primaryKey(),\n  identifier: text('identifier').notNull(),\n  value: text('value').notNull(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n})\n\nexport type User = typeof users.$inferSelect\nexport type Session = typeof sessions.$inferSelect\nexport type Account = typeof accounts.$inferSelect\nexport type Verification = typeof verification.$inferSelect\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;AAEO,MAAM,QAAQ,IAAA,kKAAO,EAAC,SAAS;IACpC,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU;IACzB,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO,GAAG,MAAM;IACrC,MAAM,IAAA,yKAAI,EAAC;IACX,eAAe,IAAA,+KAAO,EAAC,kBAAkB,OAAO,CAAC,OAAO,OAAO;IAC/D,OAAO,IAAA,yKAAI,EAAC;IACZ,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAEO,MAAM,WAAW,IAAA,kKAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU;IACzB,QAAQ,IAAA,yKAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACpD,WAAW,IAAA,mLAAS,EAAC,cAAc,OAAO;IAC1C,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO,GAAG,MAAM;IACrC,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,yKAAI,EAAC;IAChB,WAAW,IAAA,yKAAI,EAAC;AAClB;AAEO,MAAM,WAAW,IAAA,kKAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU;IACzB,QAAQ,IAAA,yKAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACpD,WAAW,IAAA,yKAAI,EAAC,cAAc,OAAO;IACrC,YAAY,IAAA,yKAAI,EAAC,eAAe,OAAO;IACvC,aAAa,IAAA,yKAAI,EAAC;IAClB,cAAc,IAAA,yKAAI,EAAC;IACnB,SAAS,IAAA,yKAAI,EAAC;IACd,sBAAsB,IAAA,mLAAS,EAAC;IAChC,uBAAuB,IAAA,mLAAS,EAAC;IACjC,OAAO,IAAA,yKAAI,EAAC;IACZ,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAEO,MAAM,eAAe,IAAA,kKAAO,EAAC,gBAAgB;IAClD,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU;IACzB,YAAY,IAAA,yKAAI,EAAC,cAAc,OAAO;IACtC,OAAO,IAAA,yKAAI,EAAC,SAAS,OAAO;IAC5B,WAAW,IAAA,mLAAS,EAAC,cAAc,OAAO;IAC1C,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/schemas/index.ts"],"sourcesContent":["export * from './books.schema'\nexport * from './users.schema'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/drizzle/drizzle.server.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/postgres-js'\nimport postgres from 'postgres'\n\nimport { envServer } from '@/config/env'\n\nimport * as schema from '../schemas'\n\nconst connectionString = envServer.DATABASE_URL!\n\nconst client = postgres(connectionString)\nexport const db = drizzle(client, { schema })\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;AAAA;AAEA;AAAA;;;;;AAEA,MAAM,mBAAmB,oJAAS,CAAC,YAAY;AAE/C,MAAM,SAAS,IAAA,qJAAQ,EAAC;AACjB,MAAM,KAAK,IAAA,uKAAO,EAAC,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 280, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/pkg/integrations/supabase/drizzle/index.ts"],"sourcesContent":["export { db } from './drizzle.server'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":["file:///Users/victorhachkajlo/Desktop/new-project/src/app/api/books/route.ts"],"sourcesContent":["import { ilike, or } from 'drizzle-orm'\nimport { NextRequest, NextResponse } from 'next/server'\n\nimport { db } from '@/pkg/integrations/supabase/drizzle'\nimport { books } from '@/pkg/integrations/supabase/schemas'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const searchQuery = searchParams.get('search')\n\n    let booksData\n\n    if (searchQuery) {\n      booksData = await db\n        .select()\n        .from(books)\n        .where(or(ilike(books.title, `%${searchQuery}%`), ilike(books.author, `%${searchQuery}%`)))\n    } else {\n      booksData = await db.select().from(books)\n    }\n\n    return NextResponse.json(booksData)\n  } catch (_error) {\n    return NextResponse.json({ error: 'Failed to fetch books' }, { status: 500 })\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;AAAA;AACA;AAAA;;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,cAAc,aAAa,GAAG,CAAC;QAErC,IAAI;QAEJ,IAAI,aAAa;YACf,YAAY,MAAM,8KAAE,CACjB,MAAM,GACN,IAAI,CAAC,+KAAK,EACV,KAAK,CAAC,IAAA,0KAAE,EAAC,IAAA,6KAAK,EAAC,+KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,GAAG,IAAA,6KAAK,EAAC,+KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAC5F,OAAO;YACL,YAAY,MAAM,8KAAE,CAAC,MAAM,GAAG,IAAI,CAAC,+KAAK;QAC1C;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,QAAQ;QACf,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}